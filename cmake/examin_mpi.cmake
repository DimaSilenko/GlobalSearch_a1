function (find_intel_mpi arg_include arg_lib)
  if (EXAMIN_TARGET_ARCH MATCHES "x86")
    set(MPI_PATH_SUFFIX "ia32")
  elseif (EXAMIN_TARGET_ARCH MATCHES "x64")
    set(MPI_PATH_SUFFIX "intel64")
  endif()
  if (NOT $ENV{I_MPI_ROOT})
    message(FATAL_ERROR "Can't find I_MPI_ROOT for Intel MPI")
  endif()

  set(MPI_INCLUDE $ENV{I_MPI_ROOT}/${MPI_PATH_SUFFIX}/include)
  set(MPI_LIB $ENV{I_MPI_ROOT}/${MPI_PATH_SUFFIX}/lib)
  set(${arg_include} ${MPI_INCLUDE} PARENT_SCOPE)
  set(${arg_lib} ${MPI_LIB} PARENT_SCOPE)
endfunction()

function (get_environment_mpi_paths arg_mpilib arg_mpiinclude arg_mpilibname)
  if (WIN32)
    if (EXAMIN_MPI MATCHES "ms")
      set_path(MPI_INCLUDE $ENV{MSMPI_INC})
      select_platform_depended_library(MPI_LIB "$ENV{MSMPI_LIB32}" "$ENV{MSMPI_LIB64}")
      set(${arg_mpilib} ${MPI_LIB} PARENT_SCOPE)
      set(${arg_mpiinclude} ${MPI_INCLUDE} PARENT_SCOPE)
      set(${arg_mpilibname} "msmpi" PARENT_SCOPE)
    elseif(EXAMIN_MPI MATCHES "mpich1")
      set_path(MPI_INCLUDE $ENV{MPICH1_INC})
      select_platform_depended_library(MPI_LIB "$ENV{MPICH1_LIB32}" "$ENV{MPICH1_LIB64}")
      set(${arg_mpilib} ${MPI_LIB} PARENT_SCOPE)
      set(${arg_mpiinclude} ${MPI_INCLUDE} PARENT_SCOPE)
      set(${arg_mpilibname} "mpich" PARENT_SCOPE)
    elseif(EXAMIN_MPI MATCHES "mpich2")
      set_path(MPI_INCLUDE $ENV{MPICH2_INC})
      select_platform_depended_library(MPI_LIB "$ENV{MPICH2_LIB32}" "$ENV{MPICH2_LIB64}")
      set(${arg_mpilib} ${MPI_LIB} PARENT_SCOPE)
      set(${arg_mpiinclude} ${MPI_INCLUDE} PARENT_SCOPE)
      set(${arg_mpilibname} "mpi" PARENT_SCOPE)
    elseif(EXAMIN_MPI MATCHES "intel")
      #find_intel_mpi(MPI_INCLUDE MPI_LIB)
      set_path(MPI_INCLUDE $ENV{INTEL_MPI_INC})
      select_platform_depended_library(MPI_LIB "$ENV{INTEL_MPI_LIB32}" "$ENV{INTEL_MPI_LIB64}")
      set(${arg_mpilib} ${MPI_LIB} PARENT_SCOPE)
      set(${arg_mpiinclude} ${MPI_INCLUDE} PARENT_SCOPE)
      set(${arg_mpilibname} "impi" PARENT_SCOPE)
    endif()
  elseif (UNIX)
      find_package(MPI REQUIRED)
      set(${arg_mpiinclude} ${MPI_CXX_INCLUDE_PATH} PARENT_SCOPE)
      set(${arg_mpilib} ${MPI_CXX_LIBRARIES} PARENT_SCOPE)
      set(${arg_mpilibname} "" PARENT_SCOPE)
  endif()
endfunction()

macro (init_stub_mpi)
  set(STUB_MPI_INCLUDE ${PROJECT_SOURCE_DIR}/lib/mpi_stub/include)
  set(STUB_MPI_SRC ${PROJECT_SOURCE_DIR}/lib/mpi_stub/src/stub_mpi.cpp)
  set(STUB_MPI_LIB mpi_stub)
  add_library(${STUB_MPI_LIB} STATIC ${STUB_MPI_SRC})
  target_include_directories(${STUB_MPI_LIB} PUBLIC ${STUB_MPI_INCLUDE})
endmacro()

function (setup_mpi arg_usempi arg_mpilib arg_mpiinclude)

  if(NOT ${arg_usempi})
    message(STATUS "Stub implementation of the MPI standard is used. Multi-process run modes are unavaliable.")
    init_stub_mpi()
    set(${arg_mpiinclude} ${STUB_MPI_INCLUDE} PARENT_SCOPE)
    set(${arg_mpilib} ${STUB_MPI_LIB} PARENT_SCOPE)
    return()
  endif()

  get_environment_mpi_paths(DEFAULT_MPI_LIB DEFAULT_MPI_INCLUDE DEFAULT_MPI_LIB_NAME)

  if (EXAMIN_MPI_LIB_USER_PATH STREQUAL "")
    if (WIN32)
      set(OUTPUT_MPI_LIB "${DEFAULT_MPI_LIB}/${DEFAULT_MPI_LIB_NAME}")

      if(NOT OUTPUT_MPI_LIB MATCHES "$.lib")
        string(APPEND OUTPUT_MPI_LIB ".lib")
      endif()

    else()
      set(OUTPUT_MPI_LIB ${DEFAULT_MPI_LIB})
    endif(WIN32)
  else()
    set(OUTPUT_MPI_LIB ${EXAMIN_MPI_LIB_USER_PATH})
  endif()
    if (EXAMIN_MPI_INCLUDE_USER_PATH STREQUAL "")
    set(OUTPUT_MPI_INCLUDE ${DEFAULT_MPI_INCLUDE})
  else()
    set(OUTPUT_MPI_INCLUDE ${EXAMIN_MPI_INCLUDE_USER_PATH})
  endif()

  set(${arg_mpiinclude} ${OUTPUT_MPI_INCLUDE} PARENT_SCOPE)
  set(${arg_mpilib} ${OUTPUT_MPI_LIB} PARENT_SCOPE)

  if(${EXAMIN_CMAKE_VERBOSE})
    message("MPI include dir: " ${OUTPUT_MPI_INCLUDE})
    message("MPI lib: " ${OUTPUT_MPI_LIB})
  endif()

endfunction (setup_mpi)
